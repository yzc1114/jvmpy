from runtime.frame import Framefrom ..instruction import NoOperandsInstructionclass RETURN(NoOperandsInstruction):    # 返回void    def execute(self, frame: Frame):        frame.thread().pop_frame()class IRETURN(NoOperandsInstruction):    # 返回整数    def execute(self, frame: Frame):        thread = frame.thread()        curr_frame = thread.pop_frame()        invoker_frame = thread.top_frame()        ret_val = curr_frame.operand_stack().pop_int()        invoker_frame.operand_stack().push_int(ret_val)class FRETURN(NoOperandsInstruction):    # 返回float    def execute(self, frame: Frame):        thread = frame.thread()        curr_frame = thread.pop_frame()        invoker_frame = thread.top_frame()        ret_val = curr_frame.operand_stack().pop_float()        invoker_frame.operand_stack().push_float(ret_val)class LRETURN(NoOperandsInstruction):    # 返回long    def execute(self, frame: Frame):        thread = frame.thread()        curr_frame = thread.pop_frame()        invoker_frame = thread.top_frame()        ret_val = curr_frame.operand_stack().pop_long()        invoker_frame.operand_stack().push_long(ret_val)class DRETURN(NoOperandsInstruction):    # 返回double    def execute(self, frame: Frame):        thread = frame.thread()        curr_frame = thread.pop_frame()        invoker_frame = thread.top_frame()        ret_val = curr_frame.operand_stack().pop_double()        invoker_frame.operand_stack().push_double(ret_val)class ARETURN(NoOperandsInstruction):    # 返回对象    def execute(self, frame: Frame):        thread = frame.thread()        curr_frame = thread.pop_frame()        invoker_frame = thread.top_frame()        ret_val = curr_frame.operand_stack().pop_ref()        invoker_frame.operand_stack().push_ref(ret_val)