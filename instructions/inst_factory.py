from .comparisons import dcmp, if_icmp, fcmp, if_acmp, ifcond, lcmp
from .constants import const, ipush, nop, ldc
from .control import goto, lookupswitch, tableswitch, return_
from .conversions import d2x, f2x, i2x, l2x
from .extended import goto_w, ifnull, wide
from .loads import aload, dload, fload, iload, lload, xaload
from .math import add, and_, div, iinc, mul, neg, or_, rem, sh, sub, xor
from .stack import dup, pop, swap
from .stores import astore, dstore, fstore, istore, lstore, xastore
from .instruction import Instruction
from .references import checkcast, getfield, getstatic, instanceof, invokespecial, invokevirtual,\
    new, putfield, putstatic, invokeinterface, invokestatic, \
    newarray, multianewarray, anewarray, arraylength, athrow
from .reserved import invokenative


class InstructionFactory(object):
    inst_map = {
        0x00: nop.NOP(),
        0x01: const.ACONST_NULL(),
        0x02: const.ICONST_M1(),
        0x03: const.ICONST_0(),
        0x04: const.ICONST_1(),
        0x05: const.ICONST_2(),
        0x06: const.ICONST_3(),
        0x07: const.ICONST_4(),
        0x08: const.ICONST_5(),
        0x09: const.LCONST_0(),
        0x0a: const.LCONST_1(),
        0x0b: const.FCONST_0(),
        0x0c: const.FCONST_1(),
        0x0d: const.FCONST_2(),
        0x0e: const.DCONST_0(),
        0x0f: const.DCONST_1(),
        0x10: ipush.BIPUSH(),
        0x11: ipush.SIPUSH(),
        0x12: ldc.LDC(),
        0x13: ldc.LDC_W(),
        0x14: ldc.LDC2_W(),
        0x15: iload.ILOAD(),
        0x16: lload.LLOAD(),
        0x17: fload.FLOAD(),
        0x18: dload.DLOAD(),
        0x19: aload.ALOAD(),
        0x1a: iload.ILOAD_0(),
        0x1b: iload.ILOAD_1(),
        0x1c: iload.ILOAD_2(),
        0x1d: iload.ILOAD_3(),
        0x1e: lload.LLOAD_0(),
        0x1f: lload.LLOAD_1(),
        0x20: lload.LLOAD_2(),
        0x21: lload.LLOAD_3(),
        0x22: fload.FLOAD_0(),
        0x23: fload.FLOAD_1(),
        0x24: fload.FLOAD_2(),
        0x25: fload.FLOAD_3(),
        0x26: dload.DLOAD_0(),
        0x27: dload.DLOAD_1(),
        0x28: dload.DLOAD_2(),
        0x29: dload.DLOAD_3(),
        0x2a: aload.ALOAD_0(),
        0x2b: aload.ALOAD_1(),
        0x2c: aload.ALOAD_2(),
        0x2d: aload.ALOAD_3(),
        0x2e: xaload.IALOAD(),
        0x2f: xaload.LALOAD(),
        0x30: xaload.FALOAD(),
        0x31: xaload.DALOAD(),
        0x32: xaload.AALOAD(),
        0x33: xaload.BALOAD(),
        0x34: xaload.CALOAD(),
        0x35: xaload.SALOAD(),
        0x36: istore.ISTORE(),
        0x37: lstore.LSTORE(),
        0x38: fstore.FSTORE(),
        0x39: dstore.DSTORE(),
        0x3a: astore.ASTORE(),
        0x3b: istore.ISTORE_0(),
        0x3c: istore.ISTORE_1(),
        0x3d: istore.ISTORE_2(),
        0x3e: istore.ISTORE_3(),
        0x3f: lstore.LSTORE_0(),
        0x40: lstore.LSTORE_1(),
        0x41: lstore.LSTORE_2(),
        0x42: lstore.LSTORE_3(),
        0x43: fstore.FSTORE_0(),
        0x44: fstore.FSTORE_1(),
        0x45: fstore.FSTORE_2(),
        0x46: fstore.FSTORE_3(),
        0x47: dstore.DSTORE_0(),
        0x48: dstore.DSTORE_1(),
        0x49: dstore.DSTORE_2(),
        0x4a: dstore.DSTORE_3(),
        0x4b: astore.ASTORE_0(),
        0x4c: astore.ASTORE_1(),
        0x4d: astore.ASTORE_2(),
        0x4e: astore.ASTORE_3(),
        0x4f: xastore.IASTORE(),
        0x50: xastore.LASTORE(),
        0x51: xastore.FASTORE(),
        0x52: xastore.DASTORE(),
        0x53: xastore.AASTORE(),
        0x54: xastore.BASTORE(),
        0x55: xastore.CASTORE(),
        0x56: xastore.SASTORE(),
        0x57: pop.POP(),
        0x58: pop.POP2(),
        0x59: dup.DUP(),
        0x5a: dup.DUP_X1(),
        0x5b: dup.DUP_X2(),
        0x5c: dup.DUP2(),
        0x5d: dup.DUP2_X1(),
        0x5e: dup.DUP2_X2(),
        0x5f: swap.SWAP(),
        0x60: add.IADD(),
        0x61: add.LADD(),
        0x62: add.FADD(),
        0x63: add.DADD(),
        0x64: sub.ISUB(),
        0x65: sub.LSUB(),
        0x66: sub.FSUB(),
        0x67: sub.DSUB(),
        0x68: mul.IMUL(),
        0x69: mul.LMUL(),
        0x6a: mul.FMUL(),
        0x6b: mul.DMUL(),
        0x6c: div.IDIV(),
        0x6d: div.LDIV(),
        0x6e: div.FDIV(),
        0x6f: div.DDIV(),
        0x70: rem.IREM(),
        0x71: rem.LREM(),
        0x72: rem.FREM(),
        0x73: rem.DREM(),
        0x74: neg.INEG(),
        0x75: neg.LNEG(),
        0x76: neg.FNEG(),
        0x77: neg.DNEG(),
        0x78: sh.ISHL(),
        0x79: sh.LSHL(),
        0x7a: sh.ISHR(),
        0x7b: sh.LSHR(),
        0x7c: sh.IUSHR(),
        0x7d: sh.LUSHR(),
        0x7e: and_.IAND(),
        0x7f: and_.LAND(),
        0x80: or_.IOR(),
        0x81: or_.LOR(),
        0x82: xor.IOR(),
        0x83: xor.LOR(),
        0x84: iinc.IINC(),
        0x85: i2x.I2L(),
        0x86: i2x.I2F(),
        0x87: i2x.I2D(),
        0x88: l2x.L2I(),
        0x89: l2x.L2F(),
        0x8a: l2x.L2D(),
        0x8b: f2x.F2I(),
        0x8c: f2x.F2L(),
        0x8d: f2x.F2D(),
        0x8e: d2x.D2I(),
        0x8f: d2x.D2L(),
        0x90: d2x.D2F(),
        0x91: i2x.I2B(),
        0x92: i2x.I2C(),
        0x93: i2x.I2S(),
        0x94: lcmp.LCMP(),
        0x95: fcmp.FCMPL(),
        0x96: fcmp.FCMPG(),
        0x97: dcmp.DCMPL(),
        0x98: dcmp.DCMPG(),
        0x99: ifcond.IFEQ(),
        0x9a: ifcond.IFNE(),
        0x9b: ifcond.IFLT(),
        0x9c: ifcond.IFGE(),
        0x9d: ifcond.IFGT(),
        0x9e: ifcond.IFLE(),
        0x9f: if_icmp.IF_ICMPEQ(),
        0xa0: if_icmp.IF_ICMPNE(),
        0xa1: if_icmp.IF_ICMPLT(),
        0xa2: if_icmp.IF_ICMPGE(),
        0xa3: if_icmp.IF_ICMPGT(),
        0xa4: if_icmp.IF_ICMPLE(),
        0xa5: if_acmp.IF_ACMPEQ(),
        0xa6: if_acmp.IF_ACMPNE(),
        0xa7: goto.GOTO(),
        # 0xa8:
        # 0xa9:
        0xaa: tableswitch.TABLE_SWITCH(),
        0xab: lookupswitch.LOOKUP_SWITCH(),
        0xac: return_.IRETURN(),
        0xad: return_.LRETURN(),
        0xae: return_.FRETURN(),
        0xaf: return_.DRETURN(),
        0xb0: return_.ARETURN(),
        0xb1: return_.RETURN(),
        0xb2: getstatic.GETSTATIC(),
        0xb3: putstatic.PUTSTATIC(),
        0xb4: getfield.GETFIELD(),
        0xb5: putfield.PUTFIELD(),
        0xb6: invokevirtual.INVOKE_VIRTUAL(),
        0xb7: invokespecial.INVOKE_SPECIAL(),
        0xb8: invokestatic.INVOKE_STATIC(),
        0xb9: invokeinterface.INVOKE_INTERFACE(),
        # 0xba:
        0xbb: new.NEW(),
        0xbc: newarray.NEW_ARRAY(),
        0xbd: anewarray.ANEW_ARRAY(),
        0xbe: arraylength.ARRAY_LENGTH(),
        0xbf: athrow.ATHROW(),
        0xc0: checkcast.CHECK_CAST(),
        0xc1: instanceof.INSTANCE_OF(),
        # 0xc2:
        # 0xc3:
        0xc4: wide.WIDE(),
        0xc5: multianewarray.MULTI_ANEW_ARRAY(),
        0xc6: ifnull.IFNULL(),
        0xc7: ifnull.IFNONNULL(),
        0xc8: goto_w.GOTO_W(),
        # 0xc9:
        # 0xca:

        0xfe: invokenative.INVOKE_NATIVE()
        # 0xff:
    }

    @classmethod
    def new_instruction(cls, opcode: int) -> Instruction:
        if opcode in cls.inst_map.keys():
            return cls.inst_map[opcode]
        else:
            raise Exception("Unsupported opcode: 0x%x" % opcode)
